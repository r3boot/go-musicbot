// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Request request
//
// swagger:model Request
type Request struct {

	// query
	// Required: true
	// Max Length: 128
	// Min Length: 1
	// Pattern: [a-zA-Z0-9_-]{1,128}
	Query *string `json:"query"`

	// submitter
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Submitter *string `json:"submitter"`
}

// Validate validates this request
func (m *Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmitter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	if err := validate.MinLength("query", "body", *m.Query, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("query", "body", *m.Query, 128); err != nil {
		return err
	}

	if err := validate.Pattern("query", "body", *m.Query, `[a-zA-Z0-9_-]{1,128}`); err != nil {
		return err
	}

	return nil
}

func (m *Request) validateSubmitter(formats strfmt.Registry) error {

	if err := validate.Required("submitter", "body", m.Submitter); err != nil {
		return err
	}

	if err := validate.MinLength("submitter", "body", *m.Submitter, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("submitter", "body", *m.Submitter, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request based on context it is used
func (m *Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Request) UnmarshalBinary(b []byte) error {
	var res Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
