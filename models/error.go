// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error error
//
// swagger:model Error
type Error struct {

	// detail
	// Max Length: 512
	// Min Length: 1
	Detail string `json:"detail,omitempty"`

	// source
	Source *ErrorSource `json:"source,omitempty"`

	// status
	// Max Length: 3
	// Min Length: 3
	// Pattern: ^[2345][0-9]{2}$
	Status string `json:"status,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.Detail) { // not required
		return nil
	}

	if err := validate.MinLength("detail", "body", m.Detail, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("detail", "body", m.Detail, 512); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Error) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinLength("status", "body", m.Status, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", m.Status, 3); err != nil {
		return err
	}

	if err := validate.Pattern("status", "body", m.Status, `^[2345][0-9]{2}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this error based on the context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorSource error source
//
// swagger:model ErrorSource
type ErrorSource struct {

	// pointer
	// Max Length: 128
	// Min Length: 1
	Pointer string `json:"pointer,omitempty"`
}

// Validate validates this error source
func (m *ErrorSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePointer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorSource) validatePointer(formats strfmt.Registry) error {
	if swag.IsZero(m.Pointer) { // not required
		return nil
	}

	if err := validate.MinLength("source"+"."+"pointer", "body", m.Pointer, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("source"+"."+"pointer", "body", m.Pointer, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error source based on context it is used
func (m *ErrorSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorSource) UnmarshalBinary(b []byte) error {
	var res ErrorSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
