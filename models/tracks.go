// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tracks tracks
//
// swagger:model Tracks
type Tracks []*TracksItems0

// Validate validates this tracks
func (m Tracks) Validate(formats strfmt.Registry) error {
	var res []error

	iTracksSize := int64(len(m))

	if err := validate.MinItems("", "body", iTracksSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("", "body", iTracksSize, 16384); err != nil {
		return err
	}

	if err := validate.UniqueItems("", "body", m); err != nil {
		return err
	}

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this tracks based on the context it is used
func (m Tracks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// TracksItems0 tracks items0
//
// swagger:model TracksItems0
type TracksItems0 struct {

	// addedon
	// Required: true
	// Max Length: 128
	// Min Length: 0
	Addedon *string `json:"addedon"`

	// duration
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Duration *int64 `json:"duration"`

	// elapsed
	// Maximum: 65535
	// Minimum: 0
	Elapsed *int64 `json:"elapsed,omitempty"`

	// filename
	// Required: true
	// Max Length: 1024
	// Min Length: 16
	// Pattern: .*[a-zA-Z0-9_-]{11}.mp3
	Filename *string `json:"filename"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// priority
	// Maximum: 10
	// Minimum: 0
	Priority *int64 `json:"priority,omitempty"`

	// rating
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Rating *int64 `json:"rating"`

	// submitter
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Submitter *string `json:"submitter"`
}

// Validate validates this tracks items0
func (m *TracksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddedon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElapsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmitter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TracksItems0) validateAddedon(formats strfmt.Registry) error {

	if err := validate.Required("addedon", "body", m.Addedon); err != nil {
		return err
	}

	if err := validate.MinLength("addedon", "body", *m.Addedon, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("addedon", "body", *m.Addedon, 128); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	if err := validate.MinimumInt("duration", "body", *m.Duration, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("duration", "body", *m.Duration, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateElapsed(formats strfmt.Registry) error {
	if swag.IsZero(m.Elapsed) { // not required
		return nil
	}

	if err := validate.MinimumInt("elapsed", "body", *m.Elapsed, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("elapsed", "body", *m.Elapsed, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	if err := validate.MinLength("filename", "body", *m.Filename, 16); err != nil {
		return err
	}

	if err := validate.MaxLength("filename", "body", *m.Filename, 1024); err != nil {
		return err
	}

	if err := validate.Pattern("filename", "body", *m.Filename, `.*[a-zA-Z0-9_-]{11}.mp3`); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := validate.MinimumInt("priority", "body", *m.Priority, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priority", "body", *m.Priority, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateRating(formats strfmt.Registry) error {

	if err := validate.Required("rating", "body", m.Rating); err != nil {
		return err
	}

	if err := validate.MinimumInt("rating", "body", *m.Rating, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rating", "body", *m.Rating, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *TracksItems0) validateSubmitter(formats strfmt.Registry) error {

	if err := validate.Required("submitter", "body", m.Submitter); err != nil {
		return err
	}

	if err := validate.MinLength("submitter", "body", *m.Submitter, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("submitter", "body", *m.Submitter, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tracks items0 based on context it is used
func (m *TracksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TracksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TracksItems0) UnmarshalBinary(b []byte) error {
	var res TracksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
