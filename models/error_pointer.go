// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorPointer error pointer
//
// swagger:model ErrorPointer
type ErrorPointer struct {

	// pointer
	// Max Length: 128
	// Min Length: 1
	Pointer string `json:"pointer,omitempty"`
}

// Validate validates this error pointer
func (m *ErrorPointer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePointer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorPointer) validatePointer(formats strfmt.Registry) error {
	if swag.IsZero(m.Pointer) { // not required
		return nil
	}

	if err := validate.MinLength("pointer", "body", m.Pointer, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("pointer", "body", m.Pointer, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error pointer based on context it is used
func (m *ErrorPointer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorPointer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorPointer) UnmarshalBinary(b []byte) error {
	var res ErrorPointer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
