// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueItem queue item
//
// swagger:model QueueItem
type QueueItem struct {

	// submitter
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Submitter *string `json:"submitter"`

	// track
	// Required: true
	Track *QueueItemTrack `json:"track"`
}

// Validate validates this queue item
func (m *QueueItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubmitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueItem) validateSubmitter(formats strfmt.Registry) error {

	if err := validate.Required("submitter", "body", m.Submitter); err != nil {
		return err
	}

	if err := validate.MinLength("submitter", "body", *m.Submitter, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("submitter", "body", *m.Submitter, 128); err != nil {
		return err
	}

	return nil
}

func (m *QueueItem) validateTrack(formats strfmt.Registry) error {

	if err := validate.Required("track", "body", m.Track); err != nil {
		return err
	}

	if m.Track != nil {
		if err := m.Track.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("track")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this queue item based on the context it is used
func (m *QueueItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTrack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueItem) contextValidateTrack(ctx context.Context, formats strfmt.Registry) error {

	if m.Track != nil {
		if err := m.Track.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("track")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueueItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueItem) UnmarshalBinary(b []byte) error {
	var res QueueItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// QueueItemTrack queue item track
//
// swagger:model QueueItemTrack
type QueueItemTrack struct {

	// addedon
	// Required: true
	// Max Length: 128
	// Min Length: 0
	Addedon *string `json:"addedon"`

	// duration
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Duration *int64 `json:"duration"`

	// elapsed
	// Maximum: 65535
	// Minimum: 0
	Elapsed *int64 `json:"elapsed,omitempty"`

	// filename
	// Required: true
	// Max Length: 1024
	// Min Length: 16
	// Pattern: .*[a-zA-Z0-9_-]{11}.mp3
	Filename *string `json:"filename"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// priority
	// Maximum: 10
	// Minimum: 0
	Priority *int64 `json:"priority,omitempty"`

	// rating
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Rating *int64 `json:"rating"`

	// submitter
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Submitter *string `json:"submitter"`
}

// Validate validates this queue item track
func (m *QueueItemTrack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddedon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElapsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmitter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueItemTrack) validateAddedon(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"addedon", "body", m.Addedon); err != nil {
		return err
	}

	if err := validate.MinLength("track"+"."+"addedon", "body", *m.Addedon, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("track"+"."+"addedon", "body", *m.Addedon, 128); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"duration", "body", m.Duration); err != nil {
		return err
	}

	if err := validate.MinimumInt("track"+"."+"duration", "body", *m.Duration, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("track"+"."+"duration", "body", *m.Duration, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateElapsed(formats strfmt.Registry) error {
	if swag.IsZero(m.Elapsed) { // not required
		return nil
	}

	if err := validate.MinimumInt("track"+"."+"elapsed", "body", *m.Elapsed, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("track"+"."+"elapsed", "body", *m.Elapsed, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"filename", "body", m.Filename); err != nil {
		return err
	}

	if err := validate.MinLength("track"+"."+"filename", "body", *m.Filename, 16); err != nil {
		return err
	}

	if err := validate.MaxLength("track"+"."+"filename", "body", *m.Filename, 1024); err != nil {
		return err
	}

	if err := validate.Pattern("track"+"."+"filename", "body", *m.Filename, `.*[a-zA-Z0-9_-]{11}.mp3`); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateID(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := validate.MinimumInt("track"+"."+"priority", "body", *m.Priority, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("track"+"."+"priority", "body", *m.Priority, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateRating(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"rating", "body", m.Rating); err != nil {
		return err
	}

	if err := validate.MinimumInt("track"+"."+"rating", "body", *m.Rating, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("track"+"."+"rating", "body", *m.Rating, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *QueueItemTrack) validateSubmitter(formats strfmt.Registry) error {

	if err := validate.Required("track"+"."+"submitter", "body", m.Submitter); err != nil {
		return err
	}

	if err := validate.MinLength("track"+"."+"submitter", "body", *m.Submitter, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("track"+"."+"submitter", "body", *m.Submitter, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this queue item track based on context it is used
func (m *QueueItemTrack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueueItemTrack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueueItemTrack) UnmarshalBinary(b []byte) error {
	var res QueueItemTrack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
